#runtime_results
#memory_results <- round((memory_results- start_mem) * 0.000001, 2) # bytes to megabytes and remove start overhead
memory_results <- round(memory_results * 0.000001, 2) # bytes to megabyte
objects_size_results <- round(objects_size_results * 0.000001, 2)
#memory_results
#objects_size_results
if(print_out == TRUE){
#plots runtime
runtime.df<- as.data.frame(runtime_results)
plot(x,runtime.df$`Sapply (secs)`,type = "o",pch="+",xlab ="matrix size (n cols,rows)",ylab ="runtime (secs)", main = "matrix computation - sapply vs parrellel " ,ylim=c(0,max(runtime_results)+(max(runtime_results)/2)))
points(x,runtime.df$`parrellel2`, col="dark red",pch="+")
lines(x,runtime.df$`parrellel2`, col="dark red",lty=2)
points(x,runtime.df$`parrellel4`, col="red",pch="+")
lines(x,runtime.df$`parrellel4`, col="red",lty=2)
points(x,runtime.df$`parrellel6`, col="orange",pch="+")
lines(x,runtime.df$`parrellel6`, col="orange",lty=2)
legend("topleft",legend=c("sapply","2 cores","4 cores","6 cores"), col=c("black","red","dark red", "orange"),
pch=c("+","+","+","+"),lty=c(1,2,3), ncol=1)
#plots memory
memory.df<- as.data.frame(memory_results)
plot(x,memory.df$`Sapply (MB)`,type = "o",pch="+",xlab ="matrix size (n cols,rows)",ylab ="memory (MB)", main = "matrix memory - sapply vs parrellel" )
points(x,memory.df$`parrellel2 (MB)`, col="dark red",pch="+")
lines(x,memory.df$`parrellel2 (MB)`, col="dark red",lty=2)
points(x,memory.df$`parrellel4 (MB)`, col="red",pch="+")
lines(x,memory.df$`parrellel4 (MB)`, col="red",lty=2)
points(x,memory.df$`parrellel6 (MB)`, col="orange",pch="+")
lines(x,memory.df$`parrellel6 (MB)`, col="orange",lty=2)
legend("topleft",legend=c("sapply","2 cores","4 cores","6 cores"), col=c("black","red","dark red", "orange"),
pch=c("+","+","+","+"),lty=c(1,2,3), ncol=1)
}
return(runtime.df)
}
x <- c(1,10)
newdataframe = rmatrix_tests(x,TRUE)
memory.df
memory.df<- as.data.frame(memory_results)
plot(x,memory.df$`Sapply (MB)`,type = "o",pch="+",xlab ="matrix size (n cols,rows)",ylab ="memory (MB)", main = "matrix memory - sapply vs parrellel" )
#plots memory
x
#plots memory
x memory.df
#plots memory
memory.df<
memory.df<- as.data.frame(memory_results)
#plots memory
memory.df
newdataframe
memory = rmatrix_tests(x,TRUE)
rmatrix_tests <- function(n_matrix = c(1,10,100) ,print_out=TRUE) {
#Summary: testing parrellel and sapply function
#parameter: n_matrix is a list of number of column and rows in 2d matrix. i.e 100 is 100x100 matrix
#loop through matrix
library("parallel")
library("pryr")
#initialise
i=0
x <- n_matrix
#runtime matrix
runtime_results=matrix(0,length(x),4)
colnames(runtime_results) <- c("Sapply (secs)","parrellel2 (secs)", "parrellel4 (secs)", "parrellel6 (secs)") #,"SystemTime","UserTime","Memory")
rownames(runtime_results) <- x
#memory consumed in matrix
memory_results=matrix(0,length(x),4)
colnames(memory_results) <- c("Sapply (MB)","parrellel2 (MB)", "parrellel4 (MB)", "parrellel6 (MB)") #,"SystemTime","UserTime","Memory")
rownames(memory_results) <- x
#size of matrix
objects_size_results=matrix(0,length(x),1)
colnames(objects_size_results) <- c("Matrix size (MB)")
rownames(objects_size_results) <- x
#start memory
start_mem = mem_used()
for (val in x) {
i = i+1
matrix_set =  matrix(rnorm(10),val,val)
#sapply
ptm <- proc.time()
temp_matrix = sapply(matrix_set,function(y) 10 * y)
endtime = proc.time() - ptm
runtime_results[i,1] <- endtime[3]
memory_results[i,1] <- mem_used()
#parallel 2 cores
ptm <- proc.time()
cl = makeCluster(2)
temp_matrix = parSapply(cl,matrix_set,function(y) 10 * y)
stopCluster(cl)
endtime = proc.time() - ptm
runtime_results[i,2] <- endtime[3]
memory_results[i,2] <- mem_used()
#parallel 4 cores
ptm <- proc.time()
cl = makeCluster(4)
temp_matrix = parSapply(cl,matrix_set,function(y) 10 * y)
stopCluster(cl)
endtime = proc.time() - ptm
runtime_results[i,3] <- endtime[3]
memory_results[i,3] <- mem_used()
#parallel 6 cores
ptm <- proc.time()
cl = makeCluster(6)
temp_matrix = parSapply(cl,matrix_set,function(y) 10 * y)
stopCluster(cl)
endtime = proc.time() - ptm
runtime_results[i,4] <- endtime[3]
memory_results[i,4] <- mem_used()
objects_size_results[i,1] = object_size(temp_matrix) #all matrix sizes in loop are the same
}
#runtime_results
#memory_results <- round((memory_results- start_mem) * 0.000001, 2) # bytes to megabytes and remove start overhead
memory_results <- round(memory_results * 0.000001, 2) # bytes to megabyte
objects_size_results <- round(objects_size_results * 0.000001, 2)
#memory_results
#objects_size_results
if(print_out == TRUE){
#plots runtime
runtime.df<- as.data.frame(runtime_results)
plot(x,runtime.df$`Sapply (secs)`,type = "o",pch="+",xlab ="matrix size (n cols,rows)",ylab ="runtime (secs)", main = "matrix computation - sapply vs parrellel " ,ylim=c(0,max(runtime_results)+(max(runtime_results)/2)))
points(x,runtime.df$`parrellel2`, col="dark red",pch="+")
lines(x,runtime.df$`parrellel2`, col="dark red",lty=2)
points(x,runtime.df$`parrellel4`, col="red",pch="+")
lines(x,runtime.df$`parrellel4`, col="red",lty=2)
points(x,runtime.df$`parrellel6`, col="orange",pch="+")
lines(x,runtime.df$`parrellel6`, col="orange",lty=2)
legend("topleft",legend=c("sapply","2 cores","4 cores","6 cores"), col=c("black","red","dark red", "orange"),
pch=c("+","+","+","+"),lty=c(1,2,3), ncol=1)
#plots memory
memory.df<- as.data.frame(memory_results)
plot(x,memory.df$`Sapply (MB)`,type = "o",pch="+",xlab ="matrix size (n cols,rows)",ylab ="memory (MB)", main = "matrix memory - sapply vs parrellel" )
points(x,memory.df$`parrellel2 (MB)`, col="dark red",pch="+")
lines(x,memory.df$`parrellel2 (MB)`, col="dark red",lty=2)
points(x,memory.df$`parrellel4 (MB)`, col="red",pch="+")
lines(x,memory.df$`parrellel4 (MB)`, col="red",lty=2)
points(x,memory.df$`parrellel6 (MB)`, col="orange",pch="+")
lines(x,memory.df$`parrellel6 (MB)`, col="orange",lty=2)
legend("topleft",legend=c("sapply","2 cores","4 cores","6 cores"), col=c("black","red","dark red", "orange"),
pch=c("+","+","+","+"),lty=c(1,2,3), ncol=1)
}
return(memory.df)
}
x <- c(1,10)
memory = rmatrix_tests(x,TRUE)
memory
rmatrix_tests <- function(n_matrix = c(1,10,100) ,print_out=TRUE) {
#Summary: testing parrellel and sapply function
#parameter: n_matrix is a list of number of column and rows in 2d matrix. i.e 100 is 100x100 matrix
#loop through matrix
library("parallel")
library("pryr")
#initialise
i=0
x <- n_matrix
#runtime matrix
runtime_results=matrix(0,length(x),4)
colnames(runtime_results) <- c("Sapply (secs)","parrellel2 (secs)", "parrellel4 (secs)", "parrellel6 (secs)") #,"SystemTime","UserTime","Memory")
rownames(runtime_results) <- x
#memory consumed in matrix
memory_results=matrix(0,length(x),4)
colnames(memory_results) <- c("Sapply (MB)","parrellel2 (MB)", "parrellel4 (MB)", "parrellel6 (MB)") #,"SystemTime","UserTime","Memory")
rownames(memory_results) <- x
#size of matrix
objects_size_results=matrix(0,length(x),1)
colnames(objects_size_results) <- c("Matrix size (MB)")
rownames(objects_size_results) <- x
#start memory
start_mem = mem_used()
for (val in x) {
i = i+1
matrix_set =  matrix(rnorm(10),val,val)
#sapply
ptm <- proc.time()
temp_matrix = sapply(matrix_set,function(y) 10 * y)
endtime = proc.time() - ptm
runtime_results[i,1] <- endtime[3]
memory_results[i,1] <- mem_used()
#parallel 2 cores
ptm <- proc.time()
cl = makeCluster(2)
temp_matrix = parSapply(cl,matrix_set,function(y) 10 * y)
stopCluster(cl)
endtime = proc.time() - ptm
runtime_results[i,2] <- endtime[3]
memory_results[i,2] <- mem_used()
#parallel 4 cores
ptm <- proc.time()
cl = makeCluster(4)
temp_matrix = parSapply(cl,matrix_set,function(y) 10 * y)
stopCluster(cl)
endtime = proc.time() - ptm
runtime_results[i,3] <- endtime[3]
memory_results[i,3] <- mem_used()
#parallel 6 cores
ptm <- proc.time()
cl = makeCluster(6)
temp_matrix = parSapply(cl,matrix_set,function(y) 10 * y)
stopCluster(cl)
endtime = proc.time() - ptm
runtime_results[i,4] <- endtime[3]
memory_results[i,4] <- mem_used()
objects_size_results[i,1] = object_size(temp_matrix) #all matrix sizes in loop are the same
}
#runtime_results
#memory_results <- round((memory_results- start_mem) * 0.000001, 2) # bytes to megabytes and remove start overhead
memory_results <- round(memory_results * 0.000001, 2) # bytes to megabyte
objects_size_results <- round(objects_size_results * 0.000001, 2)
#memory_results
#objects_size_results
if(print_out == TRUE){
#plots runtime
runtime.df<- as.data.frame(runtime_results)
plot(x,runtime.df$`Sapply (secs)`,type = "o",pch="+",xlab ="matrix size (n cols,rows)",ylab ="runtime (secs)", main = "matrix computation - sapply vs parrellel " ,ylim=c(0,max(runtime_results)+(max(runtime_results)/2)))
points(x,runtime.df$`parrellel2`, col="dark red",pch="+")
lines(x,runtime.df$`parrellel2`, col="dark red",lty=2)
points(x,runtime.df$`parrellel4`, col="red",pch="+")
lines(x,runtime.df$`parrellel4`, col="red",lty=2)
points(x,runtime.df$`parrellel6`, col="orange",pch="+")
lines(x,runtime.df$`parrellel6`, col="orange",lty=2)
legend("topleft",legend=c("sapply","2 cores","4 cores","6 cores"), col=c("black","red","dark red", "orange"),
pch=c("+","+","+","+"),lty=c(1,2,3), ncol=1)
#plots memory
memory.df<- as.data.frame(memory_results)
plot(x,memory.df$`Sapply (MB)`,type = "o",pch="+",xlab ="matrix size (n cols,rows)",ylab ="memory (MB)", main = "matrix memory - sapply vs parrellel",ylim=c(0,max(runtime_results)+5)) )
points(x,memory.df$`parrellel2 (MB)`, col="dark red",pch="+")
lines(x,memory.df$`parrellel2 (MB)`, col="dark red",lty=2)
points(x,memory.df$`parrellel4 (MB)`, col="red",pch="+")
lines(x,memory.df$`parrellel4 (MB)`, col="red",lty=2)
points(x,memory.df$`parrellel6 (MB)`, col="orange",pch="+")
lines(x,memory.df$`parrellel6 (MB)`, col="orange",lty=2)
legend("topleft",legend=c("sapply","2 cores","4 cores","6 cores"), col=c("black","red","dark red", "orange"),
pch=c("+","+","+","+"),lty=c(1,2,3), ncol=1)
}
return(memory.df)
}
rmatrix_tests <- function(n_matrix = c(1,10,100) ,print_out=TRUE) {
#Summary: testing parrellel and sapply function
#parameter: n_matrix is a list of number of column and rows in 2d matrix. i.e 100 is 100x100 matrix
#loop through matrix
library("parallel")
library("pryr")
#initialise
i=0
x <- n_matrix
#runtime matrix
runtime_results=matrix(0,length(x),4)
colnames(runtime_results) <- c("Sapply (secs)","parrellel2 (secs)", "parrellel4 (secs)", "parrellel6 (secs)") #,"SystemTime","UserTime","Memory")
rownames(runtime_results) <- x
#memory consumed in matrix
memory_results=matrix(0,length(x),4)
colnames(memory_results) <- c("Sapply (MB)","parrellel2 (MB)", "parrellel4 (MB)", "parrellel6 (MB)") #,"SystemTime","UserTime","Memory")
rownames(memory_results) <- x
#size of matrix
objects_size_results=matrix(0,length(x),1)
colnames(objects_size_results) <- c("Matrix size (MB)")
rownames(objects_size_results) <- x
#start memory
start_mem = mem_used()
for (val in x) {
i = i+1
matrix_set =  matrix(rnorm(10),val,val)
#sapply
ptm <- proc.time()
temp_matrix = sapply(matrix_set,function(y) 10 * y)
endtime = proc.time() - ptm
runtime_results[i,1] <- endtime[3]
memory_results[i,1] <- mem_used()
#parallel 2 cores
ptm <- proc.time()
cl = makeCluster(2)
temp_matrix = parSapply(cl,matrix_set,function(y) 10 * y)
stopCluster(cl)
endtime = proc.time() - ptm
runtime_results[i,2] <- endtime[3]
memory_results[i,2] <- mem_used()
#parallel 4 cores
ptm <- proc.time()
cl = makeCluster(4)
temp_matrix = parSapply(cl,matrix_set,function(y) 10 * y)
stopCluster(cl)
endtime = proc.time() - ptm
runtime_results[i,3] <- endtime[3]
memory_results[i,3] <- mem_used()
#parallel 6 cores
ptm <- proc.time()
cl = makeCluster(6)
temp_matrix = parSapply(cl,matrix_set,function(y) 10 * y)
stopCluster(cl)
endtime = proc.time() - ptm
runtime_results[i,4] <- endtime[3]
memory_results[i,4] <- mem_used()
objects_size_results[i,1] = object_size(temp_matrix) #all matrix sizes in loop are the same
}
#runtime_results
#memory_results <- round((memory_results- start_mem) * 0.000001, 2) # bytes to megabytes and remove start overhead
memory_results <- round(memory_results * 0.000001, 2) # bytes to megabyte
objects_size_results <- round(objects_size_results * 0.000001, 2)
#memory_results
#objects_size_results
if(print_out == TRUE){
#plots runtime
runtime.df<- as.data.frame(runtime_results)
plot(x,runtime.df$`Sapply (secs)`,type = "o",pch="+",xlab ="matrix size (n cols,rows)",ylab ="runtime (secs)", main = "matrix computation - sapply vs parrellel " ,ylim=c(0,max(runtime_results)+(max(runtime_results)/2)))
points(x,runtime.df$`parrellel2`, col="dark red",pch="+")
lines(x,runtime.df$`parrellel2`, col="dark red",lty=2)
points(x,runtime.df$`parrellel4`, col="red",pch="+")
lines(x,runtime.df$`parrellel4`, col="red",lty=2)
points(x,runtime.df$`parrellel6`, col="orange",pch="+")
lines(x,runtime.df$`parrellel6`, col="orange",lty=2)
legend("topleft",legend=c("sapply","2 cores","4 cores","6 cores"), col=c("black","red","dark red", "orange"),
pch=c("+","+","+","+"),lty=c(1,2,3), ncol=1)
#plots memory
memory.df<- as.data.frame(memory_results)
plot(x,memory.df$`Sapply (MB)`,type = "o",pch="+",xlab ="matrix size (n cols,rows)",ylab ="memory (MB)", main = "matrix memory - sapply vs parrellel",ylim=c(0,max(runtime_results)+5))
points(x,memory.df$`parrellel2 (MB)`, col="dark red",pch="+")
lines(x,memory.df$`parrellel2 (MB)`, col="dark red",lty=2)
points(x,memory.df$`parrellel4 (MB)`, col="red",pch="+")
lines(x,memory.df$`parrellel4 (MB)`, col="red",lty=2)
points(x,memory.df$`parrellel6 (MB)`, col="orange",pch="+")
lines(x,memory.df$`parrellel6 (MB)`, col="orange",lty=2)
legend("topleft",legend=c("sapply","2 cores","4 cores","6 cores"), col=c("black","red","dark red", "orange"),
pch=c("+","+","+","+"),lty=c(1,2,3), ncol=1)
}
return(memory.df)
}
x <- c(1,10)
memory = rmatrix_tests(x,TRUE)
rmatrix_tests <- function(n_matrix = c(1,10,100) ,print_out=TRUE) {
#Summary: testing parrellel and sapply function
#parameter: n_matrix is a list of number of column and rows in 2d matrix. i.e 100 is 100x100 matrix
#loop through matrix
library("parallel")
library("pryr")
#initialise
i=0
x <- n_matrix
#runtime matrix
runtime_results=matrix(0,length(x),4)
colnames(runtime_results) <- c("Sapply (secs)","parrellel2 (secs)", "parrellel4 (secs)", "parrellel6 (secs)") #,"SystemTime","UserTime","Memory")
rownames(runtime_results) <- x
#memory consumed in matrix
memory_results=matrix(0,length(x),4)
colnames(memory_results) <- c("Sapply (MB)","parrellel2 (MB)", "parrellel4 (MB)", "parrellel6 (MB)") #,"SystemTime","UserTime","Memory")
rownames(memory_results) <- x
#size of matrix
objects_size_results=matrix(0,length(x),1)
colnames(objects_size_results) <- c("Matrix size (MB)")
rownames(objects_size_results) <- x
#start memory
start_mem = mem_used()
for (val in x) {
i = i+1
matrix_set =  matrix(rnorm(10),val,val)
#sapply
ptm <- proc.time()
temp_matrix = sapply(matrix_set,function(y) 10 * y)
endtime = proc.time() - ptm
runtime_results[i,1] <- endtime[3]
memory_results[i,1] <- mem_used()
#parallel 2 cores
ptm <- proc.time()
cl = makeCluster(2)
temp_matrix = parSapply(cl,matrix_set,function(y) 10 * y)
stopCluster(cl)
endtime = proc.time() - ptm
runtime_results[i,2] <- endtime[3]
memory_results[i,2] <- mem_used()
#parallel 4 cores
ptm <- proc.time()
cl = makeCluster(4)
temp_matrix = parSapply(cl,matrix_set,function(y) 10 * y)
stopCluster(cl)
endtime = proc.time() - ptm
runtime_results[i,3] <- endtime[3]
memory_results[i,3] <- mem_used()
#parallel 6 cores
ptm <- proc.time()
cl = makeCluster(6)
temp_matrix = parSapply(cl,matrix_set,function(y) 10 * y)
stopCluster(cl)
endtime = proc.time() - ptm
runtime_results[i,4] <- endtime[3]
memory_results[i,4] <- mem_used()
objects_size_results[i,1] = object_size(temp_matrix) #all matrix sizes in loop are the same
}
#runtime_results
#memory_results <- round((memory_results- start_mem) * 0.000001, 2) # bytes to megabytes and remove start overhead
memory_results <- round(memory_results * 0.000001, 2) # bytes to megabyte
objects_size_results <- round(objects_size_results * 0.000001, 2)
#memory_results
#objects_size_results
if(print_out == TRUE){
#plots runtime
runtime.df<- as.data.frame(runtime_results)
plot(x,runtime.df$`Sapply (secs)`,type = "o",pch="+",xlab ="matrix size (n cols,rows)",ylab ="runtime (secs)", main = "matrix computation - sapply vs parrellel " ,ylim=c(0,max(runtime_results)+(max(runtime_results)/2)))
points(x,runtime.df$`parrellel2`, col="dark red",pch="+")
lines(x,runtime.df$`parrellel2`, col="dark red",lty=2)
points(x,runtime.df$`parrellel4`, col="red",pch="+")
lines(x,runtime.df$`parrellel4`, col="red",lty=2)
points(x,runtime.df$`parrellel6`, col="orange",pch="+")
lines(x,runtime.df$`parrellel6`, col="orange",lty=2)
legend("topleft",legend=c("sapply","2 cores","4 cores","6 cores"), col=c("black","red","dark red", "orange"),
pch=c("+","+","+","+"),lty=c(1,2,3), ncol=1)
#plots memory
memory.df<- as.data.frame(memory_results)
plot(x,memory.df$`Sapply (MB)`,type = "o",pch="+",xlab ="matrix size (n cols,rows)",ylab ="memory (MB)", main = "matrix memory - sapply vs parrellel",ylim=c(min(memory_results),max(memory_results)+5))
points(x,memory.df$`parrellel2 (MB)`, col="dark red",pch="+")
lines(x,memory.df$`parrellel2 (MB)`, col="dark red",lty=2)
points(x,memory.df$`parrellel4 (MB)`, col="red",pch="+")
lines(x,memory.df$`parrellel4 (MB)`, col="red",lty=2)
points(x,memory.df$`parrellel6 (MB)`, col="orange",pch="+")
lines(x,memory.df$`parrellel6 (MB)`, col="orange",lty=2)
legend("topleft",legend=c("sapply","2 cores","4 cores","6 cores"), col=c("black","red","dark red", "orange"),
pch=c("+","+","+","+"),lty=c(1,2,3), ncol=1)
}
return(memory.df)
}
x <- c(1,10)
memory = rmatrix_tests(x,TRUE)
x <- c(1,10,100)
memory = rmatrix_tests(x,TRUE)
knitr::opts_chunk$set(echo = TRUE)
rmatrix_tests <- function(n_matrix = c(1,10,100) ,print_out=TRUE) {
#Summary: testing parrellel and sapply function
#parameter: n_matrix is a list of number of column and rows in 2d matrix. i.e 100 is 100x100 matrix
#loop through matrix
library("parallel")
library("pryr")
#initialise
i=0
x <- n_matrix
#runtime matrix
runtime_results=matrix(0,length(x),4)
colnames(runtime_results) <- c("Sapply (secs)","parrellel2 (secs)", "parrellel4 (secs)", "parrellel6 (secs)") #,"SystemTime","UserTime","Memory")
rownames(runtime_results) <- x
#memory consumed in matrix
memory_results=matrix(0,length(x),4)
colnames(memory_results) <- c("Sapply (MB)","parrellel2 (MB)", "parrellel4 (MB)", "parrellel6 (MB)") #,"SystemTime","UserTime","Memory")
rownames(memory_results) <- x
#size of matrix
objects_size_results=matrix(0,length(x),1)
colnames(objects_size_results) <- c("Matrix size (MB)")
rownames(objects_size_results) <- x
#start memory
start_mem = mem_used()
for (val in x) {
i = i+1
matrix_set =  matrix(rnorm(10),val,val)
#sapply
ptm <- proc.time()
temp_matrix = sapply(matrix_set,function(y) 10 * y)
endtime = proc.time() - ptm
runtime_results[i,1] <- endtime[3]
memory_results[i,1] <- mem_used()
#parallel 2 cores
ptm <- proc.time()
cl = makeCluster(2)
temp_matrix = parSapply(cl,matrix_set,function(y) 10 * y)
stopCluster(cl)
endtime = proc.time() - ptm
runtime_results[i,2] <- endtime[3]
memory_results[i,2] <- mem_used()
#parallel 4 cores
ptm <- proc.time()
cl = makeCluster(4)
temp_matrix = parSapply(cl,matrix_set,function(y) 10 * y)
stopCluster(cl)
endtime = proc.time() - ptm
runtime_results[i,3] <- endtime[3]
memory_results[i,3] <- mem_used()
#parallel 6 cores
ptm <- proc.time()
cl = makeCluster(6)
temp_matrix = parSapply(cl,matrix_set,function(y) 10 * y)
stopCluster(cl)
endtime = proc.time() - ptm
runtime_results[i,4] <- endtime[3]
memory_results[i,4] <- mem_used()
objects_size_results[i,1] = object_size(temp_matrix) #all matrix sizes in loop are the same
}
#runtime_results
#memory_results <- round((memory_results- start_mem) * 0.000001, 2) # bytes to megabytes and remove start overhead
memory_results <- round(memory_results * 0.000001, 2) # bytes to megabyte
objects_size_results <- round(objects_size_results * 0.000001, 2)
#memory_results
#objects_size_results
if(print_out == TRUE){
#plots runtime
runtime.df<- as.data.frame(runtime_results)
plot(x,runtime.df$`Sapply (secs)`,type = "o",pch="+",xlab ="matrix size (n cols,rows)",ylab ="runtime (secs)", main = "matrix computation - sapply vs parrellel " ,ylim=c(0,max(runtime_results)+(max(runtime_results)/2)))
points(x,runtime.df$`parrellel2`, col="dark red",pch="+")
lines(x,runtime.df$`parrellel2`, col="dark red",lty=2)
points(x,runtime.df$`parrellel4`, col="red",pch="+")
lines(x,runtime.df$`parrellel4`, col="red",lty=2)
points(x,runtime.df$`parrellel6`, col="orange",pch="+")
lines(x,runtime.df$`parrellel6`, col="orange",lty=2)
legend("topleft",legend=c("sapply","2 cores","4 cores","6 cores"), col=c("black","red","dark red", "orange"),
pch=c("+","+","+","+"),lty=c(1,2,3), ncol=1)
#plots memory
memory.df<- as.data.frame(memory_results)
plot(x,memory.df$`Sapply (MB)`,type = "o",pch="+",xlab ="matrix size (n cols,rows)",ylab ="memory (MB)", main = "matrix memory - sapply vs parrellel",ylim=c(min(memory_results),max(memory_results)+5))
points(x,memory.df$`parrellel2 (MB)`, col="dark red",pch="+")
lines(x,memory.df$`parrellel2 (MB)`, col="dark red",lty=2)
points(x,memory.df$`parrellel4 (MB)`, col="red",pch="+")
lines(x,memory.df$`parrellel4 (MB)`, col="red",lty=2)
points(x,memory.df$`parrellel6 (MB)`, col="orange",pch="+")
lines(x,memory.df$`parrellel6 (MB)`, col="orange",lty=2)
legend("topleft",legend=c("sapply","2 cores","4 cores","6 cores"), col=c("black","red","dark red", "orange"),
pch=c("+","+","+","+"),lty=c(1,2,3), ncol=1)
}
return(memory.df)
}
x <- c(1,10,100)
memory = rmatrix_tests(x,TRUE)
setwd("C:/Users/User/Desktop/git_repos/Matrix-MCMC")
print('s')
